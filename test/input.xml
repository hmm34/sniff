<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" revision="0.8.0">

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="project/shape.cpp" hash="2c5d694b586e85ae31417c924667df122803cced"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shape.h"</cpp:file></cpp:include>

<constructor><name><name>Shape</name><operator>::</operator><name>Shape</name></name><parameter_list>()</parameter_list>
<block>{

}</block></constructor>

<constructor><name><name>Shape</name><operator>::</operator><name>Shape</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shape</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{

}</block></constructor>

<function type="operator"><type><name>Shape</name><modifier>&amp;</modifier></type> <name><name>Shape</name><operator>::</operator><name>operator<name>=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shape</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>Shape</name><operator>::</operator><name>myName</name></name><parameter_list>()</parameter_list>
<block>{
	<return>return <expr><name>name</name></expr>;</return>
}</block></function>
</unit>

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="project/shape.hpp" hash="4fd3be91e0abee6f4b843e7b6890bbbf2b9042e3"><comment type="block">/*
	Class on shapes
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<class>class <name>Shape</name> <block>{<private type="default">
</private><public>public:
	<comment type="line">// Constructor</comment>
	<constructor_decl><name>Shape</name><parameter_list>()</parameter_list>;</constructor_decl>

	<comment type="line">// Copy</comment>
	<constructor_decl><name>Shape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shape</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</constructor_decl>

	<comment type="line">// Assignment</comment>
	<function_decl type="operator"><type><name>Shape</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shape</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// Get name</comment>
	<function_decl><type><specifier>virtual</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>myName</name><parameter_list>()</parameter_list> = <literal type="number">0</literal>;</function_decl>

</public><private>private:
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
</private>}</block>;</class>
</unit>

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="project/circle.cpp" hash="0e61e93ba7b96c3191c6861da7c8f4e4b406e032"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"circle.h"</cpp:file></cpp:include>

<constructor><name><name>Circle</name><operator>::</operator><name>Circle</name></name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Circle"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>area</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name>Circle</name><operator>::</operator><name>Circle</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Circle</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{

}</block></constructor>

<function type="operator"><type><name>Circle</name><modifier>&amp;</modifier></type> <name><name>Circle</name><operator>::</operator><name>operator<name>=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Circle</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>Circle</name><operator>::</operator><name>reallyLongParameters</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{
	
}</block></function>
</unit>

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="project/circle.hpp" hash="9600d509f76d5746ddcb7de763d7843a3d8a8902"><comment type="block">/*
	Circles are the best
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shape.h"</cpp:file></cpp:include>

<comment type="line">// Woot inheritance</comment>
<class>class <name>Circle</name> <super>: <specifier>public</specifier> <name>Shape</name></super>
<block>{<private type="default">
</private><public>public:
	<constructor_decl><name>Circle</name><parameter_list>()</parameter_list>;</constructor_decl>
	<constructor_decl><name>Circle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Circle</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>;</constructor_decl>
	<function_decl type="operator"><type><name>Circle</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Circle</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>reallyLongParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>)</parameter_list>;</function_decl>
</public><private>private:
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>area</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var6</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var7</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var10</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var11</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var12</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>var13</name></decl>;</decl_stmt>
</private>}</block>;</class></unit>

</unit>
